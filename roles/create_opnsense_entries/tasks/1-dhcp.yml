---
- name: Get the subnet information that we need from opnsense
  delegate_to: localhost
  become: false
  ansible.builtin.uri:
    url: "https://{{ opnsense_firewall }}/api/kea/dhcpv4/searchSubnet"
    method: GET
    force_basic_auth: true
    user: "{{ secret_opnsense_api_key }}"
    password: "{{ secret_opnsense_api_secret }}"
  register: kea_dhcp_subnets

# - name: Print results subnets
#   ansible.builtin.debug:
#     var: kea_dhcp_subnets.json.rows

- name: Get the subnet uuid for the subnet that we need
  ansible.builtin.set_fact:
    kea_dhcp_subnet_uuid: "{{ item.uuid }}"
  with_items: "{{ kea_dhcp_subnets.json.rows }}"
  when: item.subnet == target_host_subnet
  loop_control:
    label: "{{ item.subnet }}"

- name: Assert that the subnet was found
  ansible.builtin.fail:
    msg: "The subnet was not found"
  when: kea_dhcp_subnet_uuid is not defined

# - name: Print the subnet id
#   ansible.builtin.debug:
#     var: kea_dhcp_subnet_uuid

- name: Get existing Kea dhcp entries from the api
  delegate_to: localhost
  become: false
  ansible.builtin.uri:
    url: "https://{{ opnsense_firewall }}/api/kea/dhcpv4/searchReservation"
    method: GET
    force_basic_auth: true
    user: "{{ secret_opnsense_api_key }}"
    password: "{{ secret_opnsense_api_secret }}"
  register: kea_dhcp_entries

# - name: Print the dhcp entries
#   ansible.builtin.debug:
#     var: kea_dhcp_entries.json.rows

- name: Check if the hostname is in the list
  ansible.builtin.set_fact:
    create_opnsense_entries_kea_dhcp_entry_exists: true
  when: item.hostname == inventory_hostname
  with_items: "{{ kea_dhcp_entries.json.rows }}"
  loop_control:
    label: "{{ item.hostname }}"

- name: Print whether the dhcp entry exists
  ansible.builtin.debug:
    var: create_opnsense_entries_kea_dhcp_entry_exists

- name: Create a new dhcp entry if needed
  when: not create_opnsense_entries_kea_dhcp_entry_exists
  delegate_to: localhost
  become: false
  ansible.builtin.uri:
    url: "https://{{ opnsense_firewall }}/api/kea/dhcpv4/addReservation"
    method: POST
    force_basic_auth: true
    user: "{{ secret_opnsense_api_key }}"
    password: "{{ secret_opnsense_api_secret }}"
    body_format: json
    body:
      reservation:
        hostname: "{{ inventory_hostname }}"
        ip_address: "{{ target_host_ip_address }}"
        hw_address: "{{ target_host_mac_address }}"
        subnet: "{{ kea_dhcp_subnet_uuid }}"
        description: "Ansible: {{ ansible_host_description }}"
  register: kea_dhcp_entry
  changed_when: kea_dhcp_entry.status == 200
  failed_when: kea_dhcp_entry.status != 200 or kea_dhcp_entry.json.result != "saved"
  notify: Reconfigure kea

- name: Flush handlers, as we need dhcp applied if needed
  ansible.builtin.meta: flush_handlers
