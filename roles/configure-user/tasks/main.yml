- name: Set root password
  ansible.builtin.user:
    name: root
    password: "{{ secret_root_password_hash }}"

- name: Add the user 'kism' with a bash shell
  ansible.builtin.user:
    name: kism
    password: "{{ secret_kism_password_hash }}"
    uid: 1089
    shell: /bin/bash
  when: ansible_facts["env"]["SUDO_USER"] is not defined or ansible_facts["env"]["SUDO_USER"] != "kism"

- name: Set authorized keys taken from url using lookup
  ansible.posix.authorized_key:
    user: kism
    state: present
    exclusive: true
    key: "{{ lookup('url', 'https://github.com/kism.keys', split_lines=False) }}"

# Misc non root users
- name: Add the user 'backup_svc' with a bash shell
  ansible.builtin.user:
    name: backup_svc
    uid: 1087
    # gid: 1087
    shell: /bin/bash
    append: true

- name: Add the user 'qbtuser' with a bash shell
  ansible.builtin.user:
    name: qbtuser
    uid: 1086
    # gid: 1086
    shell: /bin/bash
    append: true

- name: Add the user 'lanprivate' with a bash shell
  ansible.builtin.user:
    name: lanprivate
    uid: 1085
    # gid: 1085
    shell: /usr/sbin/nologin
    append: true

- name: Add the user 'lanuser' with a bash shell
  ansible.builtin.user:
    name: lanuser
    uid: 1084
    # gid: 1084
    shell: /usr/sbin/nologin
    append: true

# Groups
- name: Ensure group "kgadmins" exists
  ansible.builtin.group:
    name: kgadmins
    gid: 1099
    state: present

- name: Ensure group "content_private" exists
  ansible.builtin.group:
    name: content_private
    gid: 1098
    state: present

- name: Ensure group "content_public" exists
  ansible.builtin.group:
    name: content_public
    gid: 1097
    state: present

- name: Adding existing user kism to groups
  ansible.builtin.user:
    name: kism
    groups: "kgadmins, content_private, content_public, backup_svc, qbtuser"
    append: true

- name: Add lanprivate account to groups
  ansible.builtin.user:
    name: lanprivate
    groups: "content_private, content_public"
    append: true

- name: Add lanuser account to groups
  ansible.builtin.user:
    name: lanuser
    groups: "content_public"
    append: true

- name: Copy the kgadmins sudoers rule
  ansible.builtin.copy:
    src: files/sudoers_kgadmins
    dest: /etc/sudoers.d/kgadmins
    owner: root
    group: root
    mode: "0640"

- name: Ensure that bash is setup correctly for kism
  become: true
  become_user: kism
  ansible.builtin.shell:
    cmd: "curl --silent https://raw.githubusercontent.com/kism/dotfiles-simple/master/setup.sh | bash"
  register: command_output
  changed_when: command_output.rc == 0
  tags:
    - skip_ansible_lint

- name: Ensure that bash is setup correctly for root
  become: true
  become_user: root
  ansible.builtin.shell:
    cmd: "curl --silent https://raw.githubusercontent.com/kism/dotfiles-simple/master/setup.sh | bash"
  register: command_output
  changed_when: command_output.rc == 0
  tags:
    - skip_ansible_lint

# Remove ubuntu user

- name: Ensure user ubuntu is disabled
  ansible.builtin.user:
    name: ubuntu
    state: absent

- name : Ensure old ubuntu home folder doesnt exist
  ansible.builtin.file:
    path: /home/ubuntu
    state: absent
