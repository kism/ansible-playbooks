---
- name: Check if /etc/pve exists
  ansible.builtin.stat:
    path: /etc/pve
  register: pve_status

- name: "Copy telegraf config: input, systemd_units (scopes for proxmox)"
  ansible.builtin.fail:
    msg: "This playbook must be run on a proxmox host"
  when: not pve_status.stat.exists and 'proxmoxhosts' not in group_names # make double sure
  notify:
    - Restart telegraf

- name: Check if we are in tmux
  delegate_to: localhost
  ansible.builtin.set_fact:
    in_tmux: "{{ lookup('env', 'TERM_PROGRAM') | default('') }}"

- name: Fail if we are not in tmux
  delegate_to: localhost
  ansible.builtin.fail:
    msg: "This playbook must be run in tmux"
  when: in_tmux != "tmux"

- name: Get Proxmox Guests
  delegate_to: localhost
  become: false
  run_once: true
  community.general.proxmox_vm_info:
    api_user: root@pam
    api_password: "{{ secret_proxmox_password }}"
    api_host: "{{ proxmox_api_host }}"
  register: proxmox_guests
  # until: not proxmox_guests.failed # ???
  retries: 5
  delay: 10

- name: Make list of hosts
  ansible.builtin.set_fact:
    proxmox_vms_to_reboot: "{{ proxmox_guests.proxmox_vms | selectattr('node', 'equalto', inventory_hostname) | map(attribute='name') | list }}"

- name: Pause to confirm shutdown
  ansible.builtin.pause:
    prompt: "Shutdown Proxmox Guests on {{ inventory_hostname }}: {{ proxmox_vms_to_reboot }}?\n^C to cancel"
    echo: true

- name: Ensure at command is installed
  become: true
  ansible.builtin.package:
    name: at
    state: present

- name: Schedule reboot for safety
  become: true
  ansible.builtin.shell:
    cmd: |-
      set -o pipefail
      echo 'reboot --force' | at now + 5 minutes
  args:
    executable: /bin/bash
  changed_when: true

- name: Shutdown Proxmox Guests
  delegate_to: localhost
  become: false
  run_once: true
  community.general.proxmox:
    api_user: root@pam
    api_password: "{{ secret_proxmox_password }}"
    api_host: "{{ proxmox_api_host }}"
    vmid: "{{ item.vmid }}"
    state: stopped
    force: false
  when: item.name in proxmox_vms_to_reboot
  loop: "{{ proxmox_guests.proxmox_vms }}"
  failed_when: false # Don't stop, the jumpbox could go down

- name: Wait for a minute
  ansible.builtin.pause:
    seconds: 60
  when: proxmox_vms_to_reboot | length > 0
