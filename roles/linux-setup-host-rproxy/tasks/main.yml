- name: Install fedoraproject epel
  ansible.builtin.dnf:
    name: "https://download-ib01.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"
    state: present

  # makecache maybe

- name: Install Packages
  ansible.builtin.dnf:
    name:
      - nginx
      - certbot
      - python3-certbot-nginx
      - fail2ban
    state: installed

- name: Let Nginx 80 through firewalld
  ansible.posix.firewalld:
    zone: public
    service: http
    permanent: true
    immediate: true
    state: enabled
  notify:
    - Restart firewalld

- name: Let Nginx 443 through firewalld
  ansible.posix.firewalld:
    zone: public
    service: https
    permanent: true
    immediate: true
    state: enabled
  notify:
    - Restart firewalld

- name: Nginx enabled and running
  ansible.builtin.systemd:
    name: nginx
    enabled: true

- name: Copy nginx conf
  ansible.builtin.copy:
    src: "files/nginx-rproxy.conf"
    dest: /etc/nginx/nginx.conf
    mode: "0660"
  notify:
    - Restart nginx

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - /etc/nginx/sites-available
    - /etc/nginx/sites-enabled

# I hate these two
- name: Remove file (delete file)
  ansible.builtin.command:
    cmd: "rm {{ item }}/*"
  ignore_errors: true
  tags:
    - skip_ansible_lint
  loop:
    - /etc/nginx/sites-available
    - /etc/nginx/sites-enabled

- name: Copy nginx site confs
  ansible.builtin.copy:
    src: "files/{{ item }}"
    dest: /etc/nginx/sites-available/
    mode: "0660"
  notify:
    - Restart nginx
  loop: "{{ nginxconfigs }}"

- name: Create symbolic links to make sites available
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ item }}"
    dest: "/etc/nginx/sites-enabled/{{ item }}"
    owner: root
    group: root
    state: link
  notify:
    - Restart nginx
  loop: "{{ nginxconfigs }}"

- name: Add valid ips to files
  ansible.builtin.replace:
    path: "/etc/nginx/sites-available/{{ item }}"
    regexp: "secret_public_ip1"
    replace: "{{ secret_public_ip1 }}"
  notify:
    - Restart nginx
  loop: "{{ nginxconfigs }}"

- name: Add valid ips to files
  ansible.builtin.replace:
    path: "/etc/nginx/sites-available/{{ item }}"
    regexp: "secret_local_ip_range1"
    replace: "{{ secret_local_ip_range1 }}"
  notify:
    - Restart nginx
  loop: "{{ nginxconfigs }}"

- name: Add valid ips to files
  ansible.builtin.replace:
    path: "/etc/nginx/sites-available/{{ item }}"
    regexp: "secret_local_ip_range2"
    replace: "{{ secret_local_ip_range2 }}"
  notify:
    - Restart nginx
  loop: "{{ nginxconfigs }}"

- name: Copy nginx index.html
  ansible.builtin.copy:
    src: files/nginx-rproxy-index.html
    dest: /usr/share/nginx/html/index.html
    mode: "0664"
  notify:
    - Restart nginx

- name: Create pki directory if it does not exist
  ansible.builtin.file:
    path: /usr/share/nginx/html/pki
    state: directory
    mode: "0755"

- name: Enable crond
  ansible.builtin.systemd:
    name: crond
    enabled: true
    state: started

- name: Initial certbot config
  become: true
  ansible.builtin.command:
    cmd: "certbot --agree-tos --email={{ secret_email }} -v -n --nginx --expand -d kierangee.au -d influxdb2.kierangee.au -d grafana.kierangee.au"
  register: command_output
  tags:
    - skip_ansible_lint

- name: Set certbot cron job
  ansible.builtin.cron:
    name: "Try refresh Certificates"
    minute: "0"
    hour: "4"
    job: 'certbot renew"'
