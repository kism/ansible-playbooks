---
- name: Create geostat directory
  become: true
  become_user: root
  ansible.builtin.file:
    path: /opt/geostat
    state: directory
    owner: podcasto
    group: podcasto
    mode: "0755"

- name: Fix git lmao
  ansible.builtin.command:
    cmd: git config --global --add safe.directory /opt/geostat

- name: Clone geostat
  ansible.builtin.git:
    repo: https://github.com/kism/geostat
    dest: /opt/geostat
    single_branch: false
    force: true
    version: feature/filetypefilter
  notify: Restart geostat
  tags:
    - skip_ansible_lint # God damn I mmade this fork specifically for this

- name: Copy geostat config
  ansible.builtin.copy:
    src: files/geostat_settings.ini
    dest: /opt/geostat/settings.ini
    mode: "600"
  notify: Restart geostat

- name: Setup geostat influx token
  ansible.builtin.lineinfile:
    path: /opt/geostat/settings.ini
    regexp: "token = "
    line: token = {{ secret_influxdb_geostat_write }}
    state: present
  notify:
    - Restart geostat

- name: Setup geostat log location
  ansible.builtin.lineinfile:
    path: /opt/geostat/settings.ini
    regexp: "logpath = "
    line: logpath = {{ secret_geostat_path }}
    state: present
  notify:
    - Restart geostat

- name: Grab geoip database
  ansible.builtin.unarchive:
    src: https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key={{ secret_maxmind_license }}&suffix=tar.gz
    dest: /opt/geostat
    remote_src: true
  notify:
    - Restart geostat

- name: move mmdb to correct location
  ansible.builtin.shell:
    cmd: cp $(find /opt/geostat -type d -name 'GeoLite2-City_*')/GeoLite2-City.mmdb /opt/geostat

- name: remove geostat folder
  ansible.builtin.shell:
    cmd: rm -rf $(find /opt/geostat -type d -name 'GeoLite2-City_*')

- name: Create shell
  ansible.builtin.shell:
    cmd: cd /opt/geostat/ ; python3 -m venv env
  register: command_output
  changed_when: false

- name: Install geostat depends into the specified (virtualenv), inheriting globally installed modules
  ansible.builtin.pip:
    requirements: /opt/geostat/requirements.txt
    virtualenv: /opt/geostat/env
    virtualenv_site_packages: true
  notify: Restart geostat

- name: Change ownership on /opt/geostat and /var/log/nginx
  become: true
  become_user: root
  ansible.builtin.file:
    path: "{{ item }}"
    recurse: true
    owner: podcasto
    group: podcasto
  loop:
    - /opt/geostat
    - /var/log/nginx

- name: Copy systemd service
  become: true
  become_user: root
  ansible.builtin.copy:
    src: files/geostat.service
    dest: /etc/systemd/system/geostat.service
    owner: root
    group: root
    mode: "0644"
  notify: Restart geostat

- name: Enable systemd service
  become: true
  become_user: root
  ansible.builtin.systemd_service:
    name: geostat.service
    enabled: true
    daemon_reload: true
    state: started
    masked: false
  notify: Restart geostat

- name: Copy nginx logrotate
  become: true
  become_user: root
  ansible.builtin.copy:
    src: files/nginx_logrotate
    dest: /etc/logrotate.d/nginx
    owner: root
    group: root
    mode: "0644"
  notify: Restart logrotate

- name: Setup cron job for updating geoip database
  ansible.builtin.cron:
    name: Update GeoLite2-City.mmdb
    minute: 20
    hour: 4
    day: 2
    job: >
      rm -rf /tmp/geoip.tgz ;
      wget -O /tmp/geoip.tgz
      "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key={{ secret_maxmind_license }}&suffix=tar.gz" &&
      tar -xf /tmp/geoip.tgz -C /opt/geostat --wildcards --strip-components=1 '*.mmdb' &&
      systemctl restart geostat
