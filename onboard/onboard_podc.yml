---
# _____________________________________________________________________________
- name: Setup archivepodcast directory
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Add the user 'podcasto' with a bash shell
      ansible.builtin.user:
        name: podcasto
        uid: 1083
        shell: /sbin/nologin
        append: true

    - name: Disable kdump
      ansible.builtin.systemd:
        name: kdump
        enabled: false
        masked: true

# _____________________________________________________________________________
- name: Setup nginx
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Set httpd_can_network_connect flag on and keep it persistent across reboots
      ansible.posix.seboolean:
        name: httpd_can_network_connect
        state: true
        persistent: true

    - name: Fix selinux
      ansible.builtin.command: restorecon -Rv /
      tags:
        - skip_ansible_lint

    - name: Install nginx and certbot
      ansible.builtin.dnf:
        name:
          - nginx
        state: present

    - name: Copy nginx conf
      ansible.builtin.copy:
        src: "configs/nginx/nginx-podc.conf"
        dest: /etc/nginx/nginx.conf
        mode: "0660"
      notify:
        - Restart nginx

    - name: Set server address
      ansible.builtin.replace:
        path: "/etc/nginx/nginx.conf"
        regexp: "SERVER_NAME"
        replace: "{{ secret_domain }}"

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /etc/nginx/sites-available/
        - /etc/nginx/sites-enabled/

    # I hate these two
    - name: Remove file (delete file)
      ansible.builtin.shell:
        cmd: "rm {{ item }}*"
      ignore_errors: true
      tags:
        - skip_ansible_lint
      loop:
        - /etc/nginx/sites-available/
        - /etc/nginx/sites-enabled/

    - name: Copy nginx site confs
      ansible.builtin.copy:
        src: "configs/nginx/nginx-archivepodcast.conf"
        dest: /etc/nginx/sites-available/
        mode: "0660"
      notify:
        - Restart nginx

    - name: Create symbolic links to make sites available
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/nginx-archivepodcast.conf"
        dest: "/etc/nginx/sites-enabled/nginx-archivepodcast.conf"
        owner: root
        group: root
        state: link
      notify:
        - Restart nginx

    - name: Set server address
      ansible.builtin.replace:
        path: "/etc/nginx/sites-available/nginx-archivepodcast.conf"
        regexp: "secret_domain"
        replace: "{{ secret_domain }}"

    - name: Nginx enabled and running
      ansible.builtin.systemd:
        name: nginx
        enabled: true
      notify: Restart nginx

    - name: Allow http and https
      ansible.posix.firewalld:
        service: "{{ item }}"
        zone: public
        permanent: true
        state: enabled
      loop:
        - http
        - https
      notify:
        - Restart firewalld

  handlers:
    - name: Restart firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: restarted
    - name: Restart nginx
      ansible.builtin.systemd:
        name: nginx
        state: reloaded

# _____________________________________________________________________________
- name: Setup certbot
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Install certbot
      ansible.builtin.dnf:
        name:
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Initial certbot config
      become: true
      ansible.builtin.shell:
        cmd: "certbot --agree-tos --email={{ secret_email }} -v -n --nginx -d {{ secret_domain }}"
      register: command_output
      tags:
        - skip_ansible_lint

# _____________________________________________________________________________
- name: Setup archive-podcast
  hosts: podc
  become: true
  become_user: podcasto
  gather_facts: false
  tasks:
    - name: Create archivepodcast directory
      become: true
      become_user: root
      ansible.builtin.file:
        path: "/opt/archivepodcast"
        state: directory
        owner: podcasto
        group: podcasto
        mode: "0700"

    - name: Attempt to change ownership on /opt/archivepodcast
      become: true
      become_user: root
      ansible.builtin.file:
        path: "/opt/archivepodcast"
        recurse: true
        owner: podcasto
        group: podcasto

    - name: Clone archivepodcast
      ansible.builtin.git:
        repo: https://github.com/kism/archivepodcast
        dest: /opt/archivepodcast
        single_branch: true
        version: master
      notify: Restart archivepodcast

    - name: Copy archivepodcast config
      ansible.builtin.copy:
        src: configs/archivepodcast/settings.json
        dest: /opt/archivepodcast/settings.json
        mode: "600"
      notify: Restart archivepodcast

    - name: Create venv
      ansible.builtin.shell:
        cmd: "cd /opt/archivepodcast/ ; python3 -m venv env"
      register: command_output
      tags:
        - skip_ansible_lint

    - name: Install flask into the specified (virtualenv), inheriting globally installed modules
      ansible.builtin.pip:
        requirements: /opt/archivepodcast/requirements.txt
        virtualenv: /opt/archivepodcast/env
        virtualenv_site_packages: true
      notify: Restart archivepodcast

    - name: Create archivepodcast log file
      become: true
      become_user: root
      ansible.builtin.file:
        path: "/var/log/archivepodcast.log"
        state: touch
        owner: podcasto
        group: podcasto
        mode: "0664"
      notify: Restart archivepodcast

    - name: Copy systemd service
      become: true
      become_user: root
      ansible.builtin.copy:
        src: systemd/system/archivepodcast.service
        dest: /etc/systemd/system/archivepodcast.service
        owner: root
        group: root
        mode: "0644"
      notify: Restart archivepodcast

    - name: Enable systemd service
      become: true
      become_user: root
      ansible.builtin.systemd:
        name: archivepodcast.service
        enabled: true
        daemon_reload: true
        state: started
        masked: false
      notify: Restart archivepodcast

  handlers:
    - name: Restart archivepodcast
      become: true
      become_user: root
      ansible.builtin.systemd:
        name: archivepodcast
        daemon_reload: true
        state: restarted

# _____________________________________________________________________________
- name: Setup logrotate
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Copy archivepodcast logrotate
      ansible.builtin.copy:
        src: configs/logrotate/archivepodcast
        dest: /etc/logrotate.d/archivepodcast
        owner: root
        group: root
        mode: "0644"
      notify: Restart logrotate

  handlers:
    - name: Restart logrotate
      ansible.builtin.systemd:
        name: logrotate
        state: restarted

# _____________________________________________________________________________
- name: Setup telegraf
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Copy podc telegraf configs
      ansible.builtin.copy:
        src: configs/telegraf/podc.conf
        dest: /etc/telegraf/telegraf.d/podc.conf
        owner: telegraf
        group: telegraf
        mode: "600"
      notify:
        - Restart telegraf

  handlers:
    - name: Restart telegraf
      ansible.builtin.systemd:
        name: telegraf
        state: restarted

# _____________________________________________________________________________
- name: Setup log monitoring for influxdb2 with my fork of geostat
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Create geostat directory
      become: true
      become_user: root
      ansible.builtin.file:
        path: "/opt/geostat"
        state: directory
        owner: nginx
        group: nginx
        mode: "0700"

    - name: Attempt to change ownership on /opt/geostat
      become: true
      become_user: root
      ansible.builtin.file:
        path: "/opt/geostat"
        recurse: true
        owner: nginx
        group: nginx

    - name: Clone geostat
      ansible.builtin.git:
        repo: https://github.com/kism/geostat
        dest: /opt/geostat
        single_branch: true
        version: master
      notify: Restart geostat

    - name: Copy geostat config
      ansible.builtin.copy:
        src: configs/geostat/settings.ini
        dest: /opt/geostat/settings.ini
        mode: "600"
      notify: Restart geostat

    - name: Setup geostat influx token
      ansible.builtin.lineinfile:
        path: /opt/geostat/settings.ini
        regexp: "token = "
        line: "token = {{ secret_influxdb_geostat_write }}"
        state: present
      notify:
        - Restart geostat

    - name: Setup geostat log location
      ansible.builtin.lineinfile:
        path: /opt/geostat/settings.ini
        regexp: "logpath = "
        line: "logpath = {{ secret_geostat_path }}"
        state: present
      notify:
        - Restart geostat

    - name: Unarchive a file that is already on the remote machine
      ansible.builtin.unarchive:
        src: https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key={{ secret_maxmind_license }}&suffix=tar.gz
        dest: /opt/geostat
        remote_src: true
      notify:
        - Restart geostat

    - name: Fix selinux
      ansible.builtin.command: rm -rf /opt/geostat/GeoLite2-City*
      tags:
        - skip_ansible_lint

    - name: Create venv
      ansible.builtin.shell:
        cmd: "cd /opt/geostat/ ; python3 -m venv env"
      register: command_output
      tags:
        - skip_ansible_lint

    - name: Install flask into the specified (virtualenv), inheriting globally installed modules
      ansible.builtin.pip:
        requirements: /opt/geostat/requirements.txt
        virtualenv: /opt/geostat/env
        virtualenv_site_packages: true
      notify: Restart geostat

  handlers:
    - name: Restart geostat
      become: true
      become_user: root
      ansible.builtin.systemd:
        name: geostat
        daemon_reload: true
        state: restarted
