---
# _____________________________________________________________________________
- name: Setup nginx
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Install nginx and certbot
      ansible.builtin.dnf:
        name:
          - nginx
        state: present

    - name: Copy nginx conf
      ansible.builtin.copy:
        src: "configs/nginx/nginx-podc.conf"
        dest: /etc/nginx/nginx.conf
        mode: "0660"
      notify:
        - Restart nginx

    - name: Set server address
      ansible.builtin.replace:
        path: "/etc/nginx/nginx.conf"
        regexp: "SERVER_NAME"
        replace: "{{ secret_domain }}"

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - /etc/nginx/sites-available/
        - /etc/nginx/sites-enabled/

    # I hate these two
    - name: Remove file (delete file)
      ansible.builtin.shell:
        cmd: "rm {{ item }}*"
      ignore_errors: true
      tags:
        - skip_ansible_lint
      loop:
        - /etc/nginx/sites-available/
        - /etc/nginx/sites-enabled/

    - name: Copy nginx site confs
      ansible.builtin.copy:
        src: "configs/nginx/nginx-archivepodcast.conf"
        dest: /etc/nginx/sites-available/
        mode: "0660"
      notify:
        - Restart nginx

    - name: Create symbolic links to make sites available
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/nginx-archivepodcast.conf"
        dest: "/etc/nginx/sites-enabled/nginx-archivepodcast.conf"
        owner: root
        group: root
        state: link
      notify:
        - Restart nginx

    - name: Set server address
      ansible.builtin.replace:
        path: "/etc/nginx/sites-available/nginx-archivepodcast.conf"
        regexp: "secret_domain"
        replace: "{{ secret_domain }}"

    - name: Nginx enabled and running
      ansible.builtin.systemd:
        name: nginx
        enabled: true
      notify: Restart nginx

    - name: Allow http and https
      ansible.posix.firewalld:
        service: "{{ item }}"
        zone: public
        permanent: true
        state: enabled
      loop:
        - http
        - https
      notify:
        - Restart firewalld

  handlers:
    - name: Restart firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: restarted
    - name: Restart nginx
      ansible.builtin.systemd:
        name: nginx
        state: reloaded

# _____________________________________________________________________________
- name: Setup certbot
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Install nginx and certbot
      ansible.builtin.dnf:
        name:
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Initial certbot config
      become: true
      ansible.builtin.shell:
        cmd: "certbot --agree-tos --email={{ secret_email }} -v -n --nginx -d {{ secret_domain }}"
      register: command_output
      tags:
        - skip_ansible_lint

# _____________________________________________________________________________
- name: Setup archive-podcast
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Example clone of a single branch
      ansible.builtin.git:
        repo: https://github.com/kism/archivepodcast
        dest: /opt/archivepodcast
        single_branch: true
        version: master

# _____________________________________________________________________________
- name: Setup telegraf
  hosts: podc
  become: true
  gather_facts: false
  tasks:
    - name: Copy podc telegraf configs
      ansible.builtin.copy:
        src: configs/telegraf/podc.conf
        dest: /etc/telegraf/telegraf.d/podc.conf
        owner: telegraf
        group: telegraf
        mode: "600"
      notify:
        - Restart telegraf

  handlers:
    - name: Restart telegraf
      ansible.builtin.systemd:
        name: telegraf
        state: restarted
